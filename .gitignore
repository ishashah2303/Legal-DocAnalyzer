It's a common situation, and don't worry, you can definitely fix this! You've accidentally staged a lot of files you likely didn't intend to. Here's a step-by-step guide to resolve this:

1. Unstage Everything:

The first thing you need to do is remove all the currently staged changes. You can do this with the following command in your terminal:

Bash

git reset
This command will unstage all the files you added with git add . without deleting any files from your local file system. Your files will still be there, but they won't be marked for the next commit.

2. Create a .gitignore File:

Now, you need to create a .gitignore file to tell Git which files and directories it should intentionally ignore. This file should be at the root of your project directory (the same level where your .git directory is located).

Open a text editor and create a new file named .gitignore. Then, add patterns to this file that match the files and directories you want Git to ignore. Here are some common things to include (you'll need to tailor this to your specific project):

Operating System Specific Files:
.DS_Store          # macOS
Thumbs.db          # Windows
Build Artifacts:
build/
dist/
out/
target/
Dependency Management:
node_modules/      # Node.js
venv/              # Python virtual environment
env/               # Python virtual environment (another common name)
.gradle/           # Gradle build files (Java/Android)
target/            # Maven build files (Java)
packages/          # Composer dependencies (PHP)
Log Files:
*.log
Temporary Files:
*.tmp
*.swp              # Vim swap files
*.swo              # Vim swap files
IDE Specific Files:
.idea/             # IntelliJ IDEA
.vscode/           # Visual Studio Code
.project
.classpath
Secret Keys/Configuration:
config.ini
secrets.json
.env
Example .gitignore file:

.DS_Store
node_modules/
build/
dist/
*.log
.idea/
.vscode/
venv/
full_contract_pdf/